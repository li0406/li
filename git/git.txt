#阮一峰
http://www.ruanyifeng.com/blog/2014/06/git_remote.html

#日常操作
#master to develop
git push origin master:develop

#合并分支 master
git merge <分支名>

#修改文件名
#旧名称 新名称
git mv  AA aa

#新增文件,将目录下新添加的文件添加至索引库 
#参数 . 全部 
git add 目录名（文件1  文件2）

#提交文件 
git commit -a -m"提交注释"

#上传至版本库
#git push 远程主机名 当前分支:远程分支
git push origin delelop:develop

#更新版本库
git pull origin master//主分支
git pull origin develop:develop //开发分支

#屏幕清空
git clear

#切换分支
git checkout 本地分支名

#创建分支
git checkout -b develop master
git branch 分支名
#删除分支
git branch -D 分支名

#代码回滚
#--hard 回滚是删除所有修改的代码 *--soft 不会删除修改的代码 --mixed
git reset --soft "commit-id"

# 撤销 某次操作,版本会递增，不影响之前提交的内容
git revert  commit-id

#设置用户名、email
#参数 --global 全局  --system 系统，不带参数为当前目录
git config --global user.name'yourname' 
git config --global user.email'youemail'

注：本地分支名必须和服务器分支名一致

#文件冲突时
1.$ git add -u-->git commit

2.$ git checkout - -ours xxx/A.java // 抛弃甲的版本，保留乙的

$ git checkout - -theirs xxx/A.java // 抛弃乙的版本，完全采用甲的

---------------------------------分割线--------------------------------------------

#克隆一个版本库
#git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等
git clone <版本库的网址>
git clone http[s]://example.com/path/to/repo.git/
git clone ssh://example.com/path/to/repo.git/
git clone git://example.com/path/to/repo.git/
git clone /opt/git/project.git 
git clone file:///opt/git/project.git
git clone ftp[s]://example.com/path/to/repo.git/
git clone rsync://example.com/path/to/repo.git/
#SSH协议还有另一种写法。
clone [user@]example.com:path/to/repo.git/

#克隆版本库的时候，如果想用其他的主机名,需要用git clone命令的-o选项指定
#克隆的时候，指定远程主机叫做jQuery。
$ git clone -o jQuery https://github.com/jquery/jquery.git
$ git remote
jQuery

#git remote show命令加上主机名，可以查看该主机的详细信息
git remote show <主机名>

#添加远程主机
git remote rm <主机名>

#远程主机的改名
git remote rename <原主机名> <新主机名>

#远程主机的版本库有了更新,需要将这些更新取回本地,这时就要用到git fetch命令
git fetch <远程主机名>

#如果只想取回特定分支的更新，可以指定分支名。
git fetch <远程主机名> <分支名>

#查看远程分支
#-r 可以用来查看远程分支 -a 查看所有分支
git branch -r/-a

#取回远程主机某个分支的更新
git pull <远程主机名> <远程分支名>:<本地分支名>
#远程分支是与当前分支合并，则冒号后面的部分可以省略
git pull origin next

#将本地分支的更新，推送到远程主机
git push <远程主机名> <本地分支名>:<远程分支名>

#将所有本地分支都推送到origin主机
git push --all origin

#远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，
#然后再推送到远程主机。这时，如果你一定要推送，可以使用--force选项。
git push --force origin 


#添加文件
git add .

#提交文件
#-a 只将所有被修改或者已删除的且已经被git管理的文档提交倒仓库中
git commit -a -m<备注信息>


#管理主机名
$ git remote -v

#Git创建Develop分支的命令：
git checkout -b develop master

# 切换到Master分支
git checkout master

# 对Develop分支进行合并
git merge --no-ff develop

#功能分支的名字，可以采用feature-*的形式命名。
#创建一个功能分支：
git checkout -b feature-x develop
删除功能分支：
git branch -d feature-x
#开发完成后，将功能分支合并到develop分支：
git checkout develop
git merge --no-ff feature-x

#创建一个预发布分支：
git checkout -b release-1.2 develop
#确认没有问题后，合并到master分支：
git checkout master
git merge --no-ff release-1.2
# 对合并生成的新节点，做一个标签
git tag -a 1.2
#再合并到develop分支：
git checkout develop
git merge --no-ff release-1.2
#删除预发布分支
git branch -d release-1.2

#修补bug分支
#fixbug-*的形式
#修补bug分支是从Master分支上面分出来的,修补结束以后，再合并进Master和Develop分支
#创建一个修补bug分支：
git checkout -b fixbug-0.1 master
#修补结束后，合并到master分支：
git checkout master
git merge --no-ff fixbug-0.1
git tag -a 0.1.1
#再合并到develop分支：
git checkout develop
git merge --no-ff fixbug-0.1
#最后，删除"修补bug分支"：
git branch -d fixbug-0.1
